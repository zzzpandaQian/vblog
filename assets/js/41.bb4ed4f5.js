(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{462:function(t,i,e){"use strict";e.r(i);var v=e(24),_=Object(v.a)({},(function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"一-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-安装"}},[t._v("#")]),t._v(" 一.安装")]),t._v(" "),e("p",[t._v("官网下载安装包。windows需要配置环境变量。mac和linux创建仓库时会隐藏.git文件需要ls -al查看")]),t._v(" "),e("h2",{attrs:{id:"二-常用指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-常用指令"}},[t._v("#")]),t._v(" 二.常用指令")]),t._v(" "),e("p",[t._v("1.git init 初始化创建仓库")]),t._v(" "),e("p",[t._v("2.git status查看状态")]),t._v(" "),e("p",[t._v("3.git add -A或者. 添加所有更新的文件至暂存区(cached)，原先在工作区")]),t._v(" "),e("p",[t._v("4.git commit -m '版本说明' 将文件从暂存区提交到版本区")]),t._v(" "),e("p",[t._v("头一次之后可以使用git commit -a -m '...'达到直接从工作区提交到版本区")]),t._v(" "),e("p",[t._v("5.git config --list可以查看git的配置")]),t._v(" "),e("p",[t._v("6.git diff 比较工作区与暂存区的区别")]),t._v(" "),e("p",[t._v("7.git diff --cached 比较缓存区和版本区的区别")]),t._v(" "),e("p",[t._v("8.git diff master : 比较工作区和版本区的区别")]),t._v(" "),e("p",[t._v("9.git reset HEAD <file>: file表示文件名（包括后缀）可选填，暂存区与版本区一样，即回退操作，版本区的东西回退至暂存区(并非工作区)，可以通过git diff查看")]),t._v(" "),e("p",[t._v("10.git checkout <file>: 将暂存区的文件覆盖到工作区")]),t._v(" "),e("p",[t._v("11.git rm <file> --cached: 删除暂存区的文件添加参数 -r 可以删除目录")]),t._v(" "),e("p",[t._v("12.git reflog: 查看版本号")]),t._v(" "),e("p",[t._v("13.git reset --hard <version>: 回滚至特定版本，版本号取7位即可")]),t._v(" "),e("p",[t._v("14.git branch <name> 创建分支")]),t._v(" "),e("p",[t._v("15.git checkout <branchname>切换分支")]),t._v(" "),e("p",[t._v("16.git merge <branchname>将分支合并到当前的分支，注意合并前应checkout到主分支上")]),t._v(" "),e("p",[t._v("17.git log --oneline --graph 查看具体的合并流程图")]),t._v(" "),e("h5",{attrs:{id:"若发生合并冲突-应将工作区的合并文件的错误信息删除重新提交合并即可"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#若发生合并冲突-应将工作区的合并文件的错误信息删除重新提交合并即可"}},[t._v("#")]),t._v(" 若发生合并冲突，应将工作区的合并文件的错误信息删除重新提交合并即可")]),t._v(" "),e("p",[t._v("18.git remote add origin <url>远程牵引仓库")]),t._v(" "),e("p",[t._v("19.git remote remove 删除远程仓库")]),t._v(" "),e("p",[t._v("20.git fetch origin url")]),t._v(" "),e("p",[t._v("21.git push origin master 其中origin是remote origin设置的，master则是本地的主分支，也可以推送本地的其他branch")]),t._v(" "),e("p",[t._v("22.git pull")]),t._v(" "),e("p",[t._v("23.git clone")]),t._v(" "),e("h2",{attrs:{id:"三-项目中使用git常用的指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-项目中使用git常用的指令"}},[t._v("#")]),t._v(" 三.项目中使用git常用的指令")]),t._v(" "),e("p",[t._v("1.git init 本地初始化仓库\n2.git clone 远程地址 拷贝项目文件（如果有的话）\n3.git config user.name '用户名'    必须设置\ngit config user.email '邮箱'\n4.在git里生成ssh密钥并交给仓库管理员并让他设置相应权限\n5.git branch -r 查看远程仓库的分支\n6.git checkout -b <分支名称>    创建并切换对应的分支\n7.git add .或者git add -A\n8.git commit -m '提交信息'\n9.git push")])])}),[],!1,null,null,null);i.default=_.exports}}]);